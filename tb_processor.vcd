$date
	Sat Nov 23 13:19:32 2024
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module tb_processor $end
$var reg 1 ! clk $end
$var reg 1 " reset $end

$scope module uut $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 % pc_address [4] $end
$var wire 1 & pc_address [3] $end
$var wire 1 ' pc_address [2] $end
$var wire 1 ( pc_address [1] $end
$var wire 1 ) pc_address [0] $end
$var wire 1 * fetched_instruction [12] $end
$var wire 1 + fetched_instruction [11] $end
$var wire 1 , fetched_instruction [10] $end
$var wire 1 - fetched_instruction [9] $end
$var wire 1 . fetched_instruction [8] $end
$var wire 1 / fetched_instruction [7] $end
$var wire 1 0 fetched_instruction [6] $end
$var wire 1 1 fetched_instruction [5] $end
$var wire 1 2 fetched_instruction [4] $end
$var wire 1 3 fetched_instruction [3] $end
$var wire 1 4 fetched_instruction [2] $end
$var wire 1 5 fetched_instruction [1] $end
$var wire 1 6 fetched_instruction [0] $end
$var wire 1 7 opcode [3] $end
$var wire 1 8 opcode [2] $end
$var wire 1 9 opcode [1] $end
$var wire 1 : opcode [0] $end
$var wire 1 ; operand_a_addr [2] $end
$var wire 1 < operand_a_addr [1] $end
$var wire 1 = operand_a_addr [0] $end
$var wire 1 > operand_b_addr [2] $end
$var wire 1 ? operand_b_addr [1] $end
$var wire 1 @ operand_b_addr [0] $end
$var wire 1 A dest_reg [2] $end
$var wire 1 B dest_reg [1] $end
$var wire 1 C dest_reg [0] $end
$var wire 1 D dm_addr [3] $end
$var wire 1 E dm_addr [2] $end
$var wire 1 F dm_addr [1] $end
$var wire 1 G dm_addr [0] $end
$var wire 1 H write_enable $end
$var wire 1 I value_opA [7] $end
$var wire 1 J value_opA [6] $end
$var wire 1 K value_opA [5] $end
$var wire 1 L value_opA [4] $end
$var wire 1 M value_opA [3] $end
$var wire 1 N value_opA [2] $end
$var wire 1 O value_opA [1] $end
$var wire 1 P value_opA [0] $end
$var wire 1 Q value_opB [7] $end
$var wire 1 R value_opB [6] $end
$var wire 1 S value_opB [5] $end
$var wire 1 T value_opB [4] $end
$var wire 1 U value_opB [3] $end
$var wire 1 V value_opB [2] $end
$var wire 1 W value_opB [1] $end
$var wire 1 X value_opB [0] $end
$var wire 1 Y reg_write_data [7] $end
$var wire 1 Z reg_write_data [6] $end
$var wire 1 [ reg_write_data [5] $end
$var wire 1 \ reg_write_data [4] $end
$var wire 1 ] reg_write_data [3] $end
$var wire 1 ^ reg_write_data [2] $end
$var wire 1 _ reg_write_data [1] $end
$var wire 1 ` reg_write_data [0] $end
$var wire 1 a store_data [7] $end
$var wire 1 b store_data [6] $end
$var wire 1 c store_data [5] $end
$var wire 1 d store_data [4] $end
$var wire 1 e store_data [3] $end
$var wire 1 f store_data [2] $end
$var wire 1 g store_data [1] $end
$var wire 1 h store_data [0] $end
$var wire 1 i alu_result [7] $end
$var wire 1 j alu_result [6] $end
$var wire 1 k alu_result [5] $end
$var wire 1 l alu_result [4] $end
$var wire 1 m alu_result [3] $end
$var wire 1 n alu_result [2] $end
$var wire 1 o alu_result [1] $end
$var wire 1 p alu_result [0] $end
$var wire 1 q data_memory_write_enable $end
$var wire 1 r data_memory_data [7] $end
$var wire 1 s data_memory_data [6] $end
$var wire 1 t data_memory_data [5] $end
$var wire 1 u data_memory_data [4] $end
$var wire 1 v data_memory_data [3] $end
$var wire 1 w data_memory_data [2] $end
$var wire 1 x data_memory_data [1] $end
$var wire 1 y data_memory_data [0] $end
$var wire 1 z read_data [7] $end
$var wire 1 { read_data [6] $end
$var wire 1 | read_data [5] $end
$var wire 1 } read_data [4] $end
$var wire 1 ~ read_data [3] $end
$var wire 1 !! read_data [2] $end
$var wire 1 "! read_data [1] $end
$var wire 1 #! read_data [0] $end

$scope module IU $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 % pcOut [4] $end
$var wire 1 & pcOut [3] $end
$var wire 1 ' pcOut [2] $end
$var wire 1 ( pcOut [1] $end
$var wire 1 ) pcOut [0] $end
$var wire 1 * ir_out [12] $end
$var wire 1 + ir_out [11] $end
$var wire 1 , ir_out [10] $end
$var wire 1 - ir_out [9] $end
$var wire 1 . ir_out [8] $end
$var wire 1 / ir_out [7] $end
$var wire 1 0 ir_out [6] $end
$var wire 1 1 ir_out [5] $end
$var wire 1 2 ir_out [4] $end
$var wire 1 3 ir_out [3] $end
$var wire 1 4 ir_out [2] $end
$var wire 1 5 ir_out [1] $end
$var wire 1 6 ir_out [0] $end
$var wire 1 $! pc_address [4] $end
$var wire 1 %! pc_address [3] $end
$var wire 1 &! pc_address [2] $end
$var wire 1 '! pc_address [1] $end
$var wire 1 (! pc_address [0] $end
$var wire 1 )! fetched_instruction [12] $end
$var wire 1 *! fetched_instruction [11] $end
$var wire 1 +! fetched_instruction [10] $end
$var wire 1 ,! fetched_instruction [9] $end
$var wire 1 -! fetched_instruction [8] $end
$var wire 1 .! fetched_instruction [7] $end
$var wire 1 /! fetched_instruction [6] $end
$var wire 1 0! fetched_instruction [5] $end
$var wire 1 1! fetched_instruction [4] $end
$var wire 1 2! fetched_instruction [3] $end
$var wire 1 3! fetched_instruction [2] $end
$var wire 1 4! fetched_instruction [1] $end
$var wire 1 5! fetched_instruction [0] $end

$scope module PC $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var reg 5 6! pc [4:0] $end
$upscope $end

$scope module IM $end
$var wire 1 # clk $end
$var wire 1 $! address [4] $end
$var wire 1 %! address [3] $end
$var wire 1 &! address [2] $end
$var wire 1 '! address [1] $end
$var wire 1 (! address [0] $end
$var wire 1 )! instruction [12] $end
$var wire 1 *! instruction [11] $end
$var wire 1 +! instruction [10] $end
$var wire 1 ,! instruction [9] $end
$var wire 1 -! instruction [8] $end
$var wire 1 .! instruction [7] $end
$var wire 1 /! instruction [6] $end
$var wire 1 0! instruction [5] $end
$var wire 1 1! instruction [4] $end
$var wire 1 2! instruction [3] $end
$var wire 1 3! instruction [2] $end
$var wire 1 4! instruction [1] $end
$var wire 1 5! instruction [0] $end
$upscope $end
$upscope $end

$scope module CU $end
$var wire 1 * instIn [12] $end
$var wire 1 + instIn [11] $end
$var wire 1 , instIn [10] $end
$var wire 1 - instIn [9] $end
$var wire 1 . instIn [8] $end
$var wire 1 / instIn [7] $end
$var wire 1 0 instIn [6] $end
$var wire 1 1 instIn [5] $end
$var wire 1 2 instIn [4] $end
$var wire 1 3 instIn [3] $end
$var wire 1 4 instIn [2] $end
$var wire 1 5 instIn [1] $end
$var wire 1 6 instIn [0] $end
$var wire 1 7 opcode [3] $end
$var wire 1 8 opcode [2] $end
$var wire 1 9 opcode [1] $end
$var wire 1 : opcode [0] $end
$var wire 1 ; operanda [2] $end
$var wire 1 < operanda [1] $end
$var wire 1 = operanda [0] $end
$var wire 1 > operandb [2] $end
$var wire 1 ? operandb [1] $end
$var wire 1 @ operandb [0] $end
$var wire 1 D dmaddr [3] $end
$var wire 1 E dmaddr [2] $end
$var wire 1 F dmaddr [1] $end
$var wire 1 G dmaddr [0] $end
$var wire 1 A dest [2] $end
$var wire 1 B dest [1] $end
$var wire 1 C dest [0] $end
$var wire 1 7! adrr $end
$upscope $end

$scope module REG_MEM $end
$var wire 1 # clk $end
$var wire 1 H write $end
$var wire 1 $ reset $end
$var wire 1 ; opA [2] $end
$var wire 1 < opA [1] $end
$var wire 1 = opA [0] $end
$var wire 1 > opB [2] $end
$var wire 1 ? opB [1] $end
$var wire 1 @ opB [0] $end
$var wire 1 A wR [2] $end
$var wire 1 B wR [1] $end
$var wire 1 C wR [0] $end
$var wire 1 i dataIn [7] $end
$var wire 1 j dataIn [6] $end
$var wire 1 k dataIn [5] $end
$var wire 1 l dataIn [4] $end
$var wire 1 m dataIn [3] $end
$var wire 1 n dataIn [2] $end
$var wire 1 o dataIn [1] $end
$var wire 1 p dataIn [0] $end
$var reg 8 8! operand_a [7:0] $end
$var reg 8 9! operand_b [7:0] $end
$upscope $end

$scope module DM $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 q write_enable $end
$var wire 1 :! address [7] $end
$var wire 1 ;! address [6] $end
$var wire 1 <! address [5] $end
$var wire 1 =! address [4] $end
$var wire 1 D address [3] $end
$var wire 1 E address [2] $end
$var wire 1 F address [1] $end
$var wire 1 G address [0] $end
$var wire 1 a write_data [7] $end
$var wire 1 b write_data [6] $end
$var wire 1 c write_data [5] $end
$var wire 1 d write_data [4] $end
$var wire 1 e write_data [3] $end
$var wire 1 f write_data [2] $end
$var wire 1 g write_data [1] $end
$var wire 1 h write_data [0] $end
$var reg 8 >! read_data [7:0] $end
$upscope $end

$scope module EU $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 ; opAAdr [2] $end
$var wire 1 < opAAdr [1] $end
$var wire 1 = opAAdr [0] $end
$var wire 1 > opBAder [2] $end
$var wire 1 ? opBAder [1] $end
$var wire 1 @ opBAder [0] $end
$var wire 1 7 opcode [3] $end
$var wire 1 8 opcode [2] $end
$var wire 1 9 opcode [1] $end
$var wire 1 : opcode [0] $end
$var wire 1 A dest_reg [2] $end
$var wire 1 B dest_reg [1] $end
$var wire 1 C dest_reg [0] $end
$var wire 1 D storeDataAdr [3] $end
$var wire 1 E storeDataAdr [2] $end
$var wire 1 F storeDataAdr [1] $end
$var wire 1 G storeDataAdr [0] $end
$var wire 1 ?! opAsendAdr [2] $end
$var wire 1 @! opAsendAdr [1] $end
$var wire 1 A! opAsendAdr [0] $end
$var wire 1 B! opBsendAdr [2] $end
$var wire 1 C! opBsendAdr [1] $end
$var wire 1 D! opBsendAdr [0] $end
$var wire 1 E! storeDataAdrOut [3] $end
$var wire 1 F! storeDataAdrOut [2] $end
$var wire 1 G! storeDataAdrOut [1] $end
$var wire 1 H! storeDataAdrOut [0] $end
$var wire 1 I operandA [7] $end
$var wire 1 J operandA [6] $end
$var wire 1 K operandA [5] $end
$var wire 1 L operandA [4] $end
$var wire 1 M operandA [3] $end
$var wire 1 N operandA [2] $end
$var wire 1 O operandA [1] $end
$var wire 1 P operandA [0] $end
$var wire 1 Q operandB [7] $end
$var wire 1 R operandB [6] $end
$var wire 1 S operandB [5] $end
$var wire 1 T operandB [4] $end
$var wire 1 U operandB [3] $end
$var wire 1 V operandB [2] $end
$var wire 1 W operandB [1] $end
$var wire 1 X operandB [0] $end
$var wire 1 r data_memory_data [7] $end
$var wire 1 s data_memory_data [6] $end
$var wire 1 t data_memory_data [5] $end
$var wire 1 u data_memory_data [4] $end
$var wire 1 v data_memory_data [3] $end
$var wire 1 w data_memory_data [2] $end
$var wire 1 x data_memory_data [1] $end
$var wire 1 y data_memory_data [0] $end
$var reg 8 I! result [7:0] $end
$var reg 1 J! write_enable $end
$var reg 8 K! store_data [7:0] $end
$var reg 1 L! data_memory_write_enable $end
$var wire 1 M! alu_result [7] $end
$var wire 1 N! alu_result [6] $end
$var wire 1 O! alu_result [5] $end
$var wire 1 P! alu_result [4] $end
$var wire 1 Q! alu_result [3] $end
$var wire 1 R! alu_result [2] $end
$var wire 1 S! alu_result [1] $end
$var wire 1 T! alu_result [0] $end
$var wire 1 U! destReg $end

$scope module ALU $end
$var wire 1 7 opcode [3] $end
$var wire 1 8 opcode [2] $end
$var wire 1 9 opcode [1] $end
$var wire 1 : opcode [0] $end
$var wire 1 I operandA [7] $end
$var wire 1 J operandA [6] $end
$var wire 1 K operandA [5] $end
$var wire 1 L operandA [4] $end
$var wire 1 M operandA [3] $end
$var wire 1 N operandA [2] $end
$var wire 1 O operandA [1] $end
$var wire 1 P operandA [0] $end
$var wire 1 Q operandB [7] $end
$var wire 1 R operandB [6] $end
$var wire 1 S operandB [5] $end
$var wire 1 T operandB [4] $end
$var wire 1 U operandB [3] $end
$var wire 1 V operandB [2] $end
$var wire 1 W operandB [1] $end
$var wire 1 X operandB [0] $end
$var reg 8 V! result [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
b0 6!
b0 8!
b0 9!
bx >!
b0 I!
0J!
b0 K!
0L!
b0 V!
0)
0(
0'
0&
0%
06
05
04
03
02
01
00
0/
0.
0-
1,
1+
1*
0:
19
18
17
0=
0<
0;
0@
0?
0>
0C
0B
0A
zG
zF
zE
zD
0H
0P
0O
0N
0M
0L
0K
0J
0I
0X
0W
0V
0U
0T
0S
0R
0Q
z`
z_
z^
z]
z\
z[
zZ
zY
0h
0g
0f
0e
0d
0c
0b
0a
0p
0o
0n
0m
0l
0k
0j
0i
0q
xy
xx
xw
xv
xu
xt
xs
xr
z#!
z"!
z!!
z~
z}
z|
z{
zz
0(!
0'!
0&!
0%!
0$!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
1+!
1*!
1)!
07!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0U!
0#
1$
z=!
z<!
z;!
z:!
0A!
0@!
0?!
0D!
0C!
0B!
0H!
0G!
0F!
0E!
$end
#5000
1!
1#
#10000
0!
0#
#15000
0"
1!
0$
1#
b1 6!
1J!
bx I!
1H
xp
xo
xn
xm
xl
xk
xj
xi
1(!
15!
11!
1)
16
12
1C
1U!
#20000
0!
0#
#25000
1!
1#
b10 6!
0(!
1'!
05!
14!
01!
10!
0)
1(
06
15
02
11
0C
1B
0U!
#30000
0!
0#
#35000
1!
1#
b11 6!
1(!
15!
11!
1)
16
12
1C
1U!
#40000
0!
0#
#45000
1!
1#
b100 6!
0(!
0'!
1&!
05!
04!
13!
01!
00!
1/!
0)
0(
1'
06
05
14
02
01
10
0C
0B
1A
0U!
#50000
0!
0#
#55000
1!
1#
b101 6!
1(!
15!
11!
1)
16
12
1C
1U!
#60000
0!
0#
#65000
1!
1#
b110 6!
0(!
1'!
05!
14!
01!
10!
0)
1(
06
15
02
11
0C
1B
0U!
#70000
0!
0#
#75000
1!
1#
b111 6!
1(!
15!
11!
1)
16
12
1C
1U!
#80000
0!
0#
#85000
1!
1#
b1000 6!
0(!
0'!
0&!
1%!
05!
04!
03!
12!
01!
00!
0/!
1,!
0+!
0*!
0)!
0)
0(
0'
1&
06
05
04
13
02
01
00
1-
0,
0+
0*
0C
0B
0A
0U!
1:
09
08
07
1@
1D!
bx 9!
xX
xW
xV
xU
xT
xS
xR
xQ
bx V!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
#90000
0!
0#
#95000
1!
1#
b1001 6!
1(!
15!
02!
11!
10!
1/!
1.!
1-!
0,!
1+!
1)
16
03
12
11
10
1/
1.
0-
1,
1C
1U!
0:
19
1=
1<
1;
0@
1?
1>
0D!
1C!
1B!
1A!
1@!
1?!
bx 8!
xP
xO
xN
xM
xL
xK
xJ
xI
#100000
0!
0#
#105000
1!
1#
b1010 6!
0(!
1'!
05!
14!
12!
01!
0/!
0-!
1,!
0)
1(
06
15
13
02
00
0.
1-
0C
1B
0U!
1:
0=
0;
1@
0?
1D!
0C!
0A!
0?!
#110000
0!
0#
